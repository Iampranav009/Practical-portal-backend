
# ⚖️ CursorL Instruction Rules for Practical Portal (PlayWeb)

These rules must be followed strictly for **every file, feature, and code generation** inside this project.

---

## 🔑 General Guidelines

1. **Follow instructions exactly** – do not add unnecessary code or features.
2. **Keep code simple, modular, and minimal** – avoid overengineering.
3. **Do not generate overwhelming code blocks** – break logic into small, manageable parts.
4. **Always prioritize clarity and maintainability over complexity.**
5. **Use comments to explain only where needed** – avoid flooding with unnecessary documentation.

---

## 📦 Frontend Rules

1. **Framework**: Use **Next.js (React)** + **TailwindCSS** + **shadcn/ui**.
2. **Design**: Mobile-first → optimize for **Nexus 15 screen size**, then scale for desktop.
3. **Components**: Use **shadcn/ui** for buttons, cards, forms (avoid writing custom unless required).
4. **File Structure**: Keep Next.js **pages clean** and move reusable logic/components into `/components`.
5. **No unnecessary dependencies** – stick to our tech stack.

---

## 🛠 Backend Rules

1. **Framework**: Use **Express.js** for APIs.
2. **Database**: MySQL queries must follow the schema exactly (Users, Batches, Batch\_Members, Submissions).
3. **Code Style**: Keep each route/controller small and focused (e.g., `createBatch`, `joinBatch`).
4. **Security**: Always validate inputs before inserting into DB.
5. **Do not mix logic** – keep **routes**, **controllers**, and **db queries** separated.

---

## 🔐 Authentication Rules

1. Use **Firebase Authentication** only.
2. Ensure **role-based access** (Student / Teacher) is respected everywhere.
3. Do not duplicate auth logic – keep it centralized.

---

## 🔄 Real-Time Rules

1. Use **Socket.IO** for real-time updates (e.g., submission status changes).
2. Keep WebSocket events simple → `submissionUpdate`, `batchJoin`.
3. Do not overload Socket.IO with unnecessary events.

---

## 🎨 UI/UX Rules

1. Keep UI **minimal, modern, and Gen-Z friendly**.
2. Use **consistent spacing, typography, and colors**.
3. Do not create clutter – every page must feel lightweight.
4. Stick to **smooth, simple layouts** → no over-animations or heavy designs.

---

## 🚫 Things NOT To Do

* ❌ Do not generate huge boilerplate dumps of code – keep it modular.
* ❌ Do not add extra libraries outside our defined stack.
* ❌ Do not create overly complex state management (use simple hooks/context).
* ❌ Do not write code that deviates from schema/roles.
* ❌ Do not auto-create fake features we didn’t define.

---

## ✅ Things To Always Do

* ✅ Write **clean, minimal, and tested** code.
* ✅ Follow **schema + roles** as single source of truth.
* ✅ Keep components, routes, and queries **small and reusable**.
* ✅ Always think **mobile-first**.
* ✅ Use **comments only where needed**.

---
